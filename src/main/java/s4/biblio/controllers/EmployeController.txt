package s4.biblio.controllers;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import s4.biblio.form.EmployeFilterForm;
import s4.biblio.form.EmployeForm;
import s4.biblio.services.*;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

@Controller
@RequestMapping("/employe")
public class EmployeController {

    private final EmployeService employeService;

    private final DepartementService departementService;
    private final SexeService sexeService;
    private final RoleService roleService;


    public EmployeController(SexeService sexeService,
            ClientService clientService, DepartementService departementService , RoleService roleService, EmployeService employeService) {
        this.sexeService = sexeService;
        this.departementService = departementService;
        this.roleService = roleService;
        this.employeService = employeService;
    }

    @GetMapping("/form")
    public ModelAndView getDepenseForm() {
        ModelAndView mv = new ModelAndView("template");
        mv.addObject("content", "employe/employe-form.jsp");
        mv.addObject("sexes", sexeService.getAllSexes());
        mv.addObject("roles", roleService.getAllRoles());


        return mv;
    }

    @PostMapping("/save")
    public String saveEmploye(@ModelAttribute EmployeForm employeForm, RedirectAttributes redirectAttributes) {
        try {
            System.out.println(employeForm.toString());
            employeService.saveEmploye(employeForm);
            redirectAttributes.addFlashAttribute("message", "Vente enregistrée avec succès !");
            redirectAttributes.addFlashAttribute("messageType", "success");
        } catch (Exception e) {
            System.out.println(e.getMessage());
            redirectAttributes.addFlashAttribute("message", "Erreur lors de l'enregistrement !");
            redirectAttributes.addFlashAttribute("messageType", "danger");
        }
        return "redirect:/employe/form";
    }

    @GetMapping("/liste")
    public ModelAndView getEmployeListe(@ModelAttribute EmployeFilterForm employeFilterForm) {


        // System.out.println(employeFilterForm.toString());
        ModelAndView mv = new ModelAndView("template");
        mv.addObject("content", "employe/employe-liste.jsp");

        mv.addObject("employes", employeService.getAllEmployes());
        mv.addObject("departements", departementService.getAllDepartements());
        mv.addObject("sexes", sexeService.getAllSexes());


        // List<Vente> vente_filtred = venteService.getByVenteFilterForm(venteFilterForm);
        mv.addObject("employes", employeService.getByEmployeFilterForm(employeFilterForm));
        return mv;
    }

}
